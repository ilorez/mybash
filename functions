#######################################################
# SPECIAL FUNCTIONS
#######################################################

# Copy and go to the directory
cpg() {
  if [ -d "$2" ]; then
    cp "$1" "$2" && cd "$2"
  else
    cp "$1" "$2"
  fi
}

# Move and go to the directory
mvg() {
  if [ -d "$2" ]; then
    mv "$1" "$2" && cd "$2"
  else
    mv "$1" "$2"
  fi
}

# Create and go to the directory
mkdirg() {
  mkdir -p "$1"
  cd "$1"
}

# Copy file with a progress bar
cpp() {
  set -e
  strace -q -ewrite cp -- "${1}" "${2}" 2>&1 |
    awk '{
        count += $NF
        if (count % 10 == 0) {
            percent = count / total_size * 100
            printf "%3d%% [", percent
            for (i=0;i<=percent;i++)
                printf "="
            printf ">"
            for (i=percent;i<100;i++)
                printf " "
            printf "]\r"
        }
    }
    END { print "" }' total_size="$(stat -c '%s' "${1}")" count=0
}

# Automatically do an ls after each cd, z, or zoxide
cd() {
  if [ -n "$1" ]; then
    builtin cd "$@" && ls
  else
    builtin cd ~ && ls
  fi
}

# GitHub Titus Addition
gcom() {
  git add .
  git commit -m "$1"
}

lazyg() {
  # Validate commit message
  if [ -z "$1" ]; then
    echo "Error: Commit message required"
    return 1
  fi

  # Check for changes
  if [ -z "$(git status --porcelain)" ]; then
    echo "No changes to commit"
    return 1
  fi

  # Safety check for branch name
  current_branch=$(git symbolic-ref --short HEAD 2>/dev/null)
  if [ -z "$current_branch" ]; then
    echo "Not on any branch!"
    return 1
  fi

  # Execute commands with error checking
  git add . && \
  git commit -m "$1" && \
  git push || {
    echo "Operation failed"
    return 1
  }
}

gflow() {
  # Validate input
  if [ -z "$1" ] || [ -z "$2" ]; then
    echo "Usage: gflow <branch_suffix> <commit_message>"
    return 1
  fi

  # Get default branch name (supports both master/main)
  default_branch=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')

  # Create branch name
  branch_name="ilorez/$1"

  # Branch validation
  if git show-ref --verify --quiet "refs/heads/$branch_name"; then
    echo "Branch $branch_name already exists!"
    return 1
  fi

  # Create and switch to new branch
  if ! git checkout -b "$branch_name"; then
    echo "Failed to create branch"
    return 1
  fi

  # Push branch with tracking
  if ! git push --set-upstream origin "$branch_name"; then
    echo "Failed to push branch"
    return 1
  fi

  # Commit changes safely
  lazyg "$2" || return 1

  # Switch back to default branch
  if ! git checkout "$default_branch"; then
    echo "Failed to switch back to $default_branch"
    return 1
  fi

  # Update local default branch
  if ! git pull; then
    echo "Failed to pull latest changes"
    return 1
  fi

  echo "Go to GitHub to merge the $branch_name branch"
  echo "Branch URL: $(git config --get remote.origin.url | sed 's/\.git$//')/tree/$branch_name"
}



# find command
ff() {
  find . -type f -name "*$1*"
}

# Extracts any archive(s) (if unp isn't installed)
extract() {
  for archive in "$@"; do
    if [ -f "$archive" ]; then
      case $archive in
      *.tar.bz2) tar xvjf $archive ;;
      *.tar.gz) tar xvzf $archive ;;
      *.bz2) bunzip2 $archive ;;
      *.rar) rar x $archive ;;
      *.gz) gunzip $archive ;;
      *.tar) tar xvf $archive ;;
      *.tbz2) tar xvjf $archive ;;
      *.tgz) tar xvzf $archive ;;
      *.zip) unzip $archive ;;
      *.Z) uncompress $archive ;;
      *.7z) 7z x $archive ;;
      *) echo "don't know how to extract '$archive'..." ;;
      esac
    else
      echo "'$archive' is not a valid file!"
    fi
  done
}

# Searches for text in all files in the current folder
ftext() {
  # -i case-insensitive
  # -I ignore binary files
  # -H causes filename to be printed
  # -r recursive search
  # -n causes line number to be printed
  # optional: -F treat search term as a literal, not a regular expression
  # optional: -l only print filenames and not the matching lines ex. grep -irl "$1" *
  grep -iIHrn --color=always "$1" . | less -r
}

# Goes up a specified number of directories  (i.e. up 4)
up() {
  local d=""
  limit=$1
  for ((i = 1; i <= limit; i++)); do
    d=$d/..
  done
  d=$(echo $d | sed 's/^\///')
  if [ -z "$d" ]; then
    d=..
  fi
  cd $d
}

# Returns the last 2 fields of the working directory
pwdtail() {
  pwd | awk -F/ '{nlast = NF -1;print $nlast"/"$NF}'
}

# Trim leading and trailing spaces (for scripts)
trim() {
  local var=$*
  var="${var#"${var%%[![:space:]]*}"}" # remove leading whitespace characters
  var="${var%"${var##*[![:space:]]}"}" # remove trailing whitespace characters
  echo -n "$var"
}

# Function to find and replace text in a file
frtext() {
    if [ "$#" -ne 3 ]; then
        echo "Usage: frtext <word_to_find> <word_to_replace> <file>"
        return 1
    fi

    word_to_find="$1"
    word_to_replace="$2"
    file="$3"

    if [ ! -f "$file" ]; then
        echo "Error: File '$file' does not exist."
        return 1
    fi

    # Use sed for find and replace
    sed -i "s/$word_to_find/$word_to_replace/g" "$file" && \
    echo "Replaced '$word_to_find' with '$word_to_replace' in '$file'."
}

# branchdel()
# {
#   git branch -d `git branch --list $1\*`
# }
branchdel() {
  # Check if prefix is provided
  if [[ -z "$1" ]]; then
    echo "Usage: branchdel <prefix>"
    return 1
  fi
  
  # Get list of branches to delete, excluding current and protected branches
  local current=$(git symbolic-ref --short HEAD 2>/dev/null)
  local branches=$(git branch --list "$1*" | grep -v "^\*\|main\|master" | sed "s/^[ \t]*//")
  
  # Check if any branches found
  if [[ -z "$branches" ]]; then
    echo "No branches found with prefix '$1'"
    return 0
  fi
  
  # Show which branches will be deleted
  echo "Branches to delete:"
  echo "$branches" | sed 's/^/  - /'
  
  # Ask for confirmation
  echo "Continue with deletion? (y/N) "
  read confirm
  if [[ "$confirm" != [yY]* ]]; then
    echo "Operation cancelled"
    return 0
  fi
  
  # Delete branches
  git branch -d $(echo "$branches")
  echo "Branches with prefix '$1' deleted (where possible)"
}
# run git pull in all subdirectories
git_pull_all() {
    for dir in */; do
        if [ -d "$dir/.git" ]; then
            (
                git --git-dir="$dir/.git" --work-tree="$dir" pull > /dev/null 2>&1 &
                echo "Running git pull in $dir"
            )
        fi
    done
    wait
    echo "All git pull operations are complete."
}

mountf()
{
  lsblk
  # example usage: mountf sdc1 name => mount in /mnt/
  mkdir -p /mnt/$2
  sudo mount /dev/$1 /mnt/$2
  #sudo chown -R $USER:$USER /mnt/$2
  #sudo chmod -R 777 /mnt/$2
  lsblk
  echo "Mounted /dev/$1 to /mnt/$2"
}

umountf()
{
  # example usage: umountf name => umount /mnt/
  lsblk
  sudo umount /mnt/$1
  echo "Unmounted /mnt/$1"
  lsblk
}
